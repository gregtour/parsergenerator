#### example 2D pong game ####
import game2D
include 'paddle.png'
include 'ball.png'

module pong

ball = Sprite('ball.png')
ball.x = 50
ball.y = 50

ball.vx = 10.0
ball.vy = -5.0

p1 = Sprite('paddle.png')
p1.x = 0
p1.y = 25

p2 = Sprite('paddle.png')
p2.x = 90
p2.y = 25

p1score = 0
p2score = 0
scoreDisplay = Text("0 - 0")
scoreDisplay.x = 0
scoreDisplay.y = 0

; update the score and reset the ball
func score(player)
  ball.x = 50
  ball.y = 50
  ball.vy = 5.0
  ball.vx = 10.0

  if player == 1 then
    p1score++
  else if player == 2 then
    p2score++
    ball.vx *= -1.0
  endif
  
  scoreDisplay.text = p1score + " - " + p2score

  draw()
  delay(5.0)
endfunc

; main loop
while true do

  ; player 1 controls
  if keydown('z') then
    p1.y += 10
  else if keydown('a') then
    p1.y -= 10
  endif
  
  ; player 2 controls
  if keydown('m') then
    p2.y += 10
  else if keydown('k') then
    p2.y -= 10
  endif
  
  ; ball motion
  ball.x += ball.vx
  ball.y += ball.vy
  
  ; player 1 paddle check
  if ball.x < 10 then
    if ball.y > p1.y and ball.y < p1.y + 50 then
      ball.vx = abs(ball.vx)
    endif
  endif
  
  ; player 2 paddle check
  if ball.x > 90 then
    if ball.y > p2.y and ball.y < p2.y + 50 then
      ball.vx = -abs(ball.vx)
    endif
  endif
  
  ; score point check
  if ball.x < 0 then
    score(2)
  else if ball.x > 100 then
    score(1)
  endif

  draw()
loop

endmodule
####

#### example 3D game ####
import game3D
import draw2D
import scene
import collision

include 'ground.3d'
include 'ship.3d'
include 'obstacle.3d'


module cuberunner

ground = InfiniteMesh('ground.3d')
ship = Mesh('ship.3d')
camera = FollowCamera(ship)
obstacles = []
distance = 0

func lose()
  message = text(distance + " You lose. Press any key to try again.")
  message.x = 50
  message.y = 50
  draw()
  delay(2.0)
  waitkey()

  message.remove()
  start()
endfunc

func start()
  scene.remove(obstacles)
  obstacles = []
  
  for i = 1 to 50 do
    obstacle = Mesh('obstacle3d')
    obstacle.x = rand() mod 100 - 50
    obstacle.z = rand() mod 100
    obstacles.push(obstacle)
  loop  
endfunc

start()
while true do
  if keydown('a') then
    ship.x -= 10.0
  else if keydown('d') then
    ship.x += 10.0
  endif
  
  distance += 10.0
  ship.z = distance
  
  for obstacle in obstacles do
    if obstacle.z > distance then
      obstacle.remove()
      obstacle = Mesh('obstacle.3d')
      obstacle.x = ship.x + rand() mod 100 - 50
      obstacle.z = distance + 100.0
      obstacles.push(obstacle)
    endif
  loop
  
  if Collides(ship, obstacles) then
    lose()
  endif

  draw()
loop

endmodule
####

/*
Example of each language feature.
Testing out the formatting and highlighting.
*/
module TestCode
/*
This is an example of a class.
It extends two other classes.
*/
class Main() extends UnitTest, OtherTest
x = 2
;; run all tests
func RunTests
for i = 1 to 10 do
RunTest(i)
loop
endfunc

// run one of a few tests
func RunTest(testNum)
duck.println(testNum)
endfunc
endclass

# the main function
func Main
x = 20
// this tests multiple if then else if
if x > 10 then
print("greater than")
else if x < -10 then
print("less than")
else
print("middle")
endif

// this is what a while loop looks like
while x > 10 do
print(x)
x -= 3
loop

// now a for loop
print("Count by 2.")
for i = 2 to 10 step 2 do
print(i)
loop

/* do while loop -
also testing multiline
comment indents */
do
/* leading inline comment */ foo()
bar() /* trailing inline comment */
; break / continue / return
if stop() then
break
else if dontStop() then
continue
else if quitFunction() then
return 2
endif
loop while test() 

// single line let expression
let a=2.4, b=4
begin
print(a+b)
end

// multiple line let expression
let x = "hello",
y = "world",
z = "!"
begin
print(x + ", " + y + z)
end

// exception handling
try
x = 1 / 0.0
Throw "That should have thrown an exception."
catch e
print(e)
done

// avoid exception without catch
try
x = 0 / 0
done

// testing mod, and, or, not, true, false
if 11 mod 2 and 4 < 5 or 5 > 4 and True or not False then
print("true story")
endif

// is keyword
if x is number then
print("x is a number")
else
print('x is not a number')
endif

// objects and arrays
myArray = [1, 2, 3, 4, 5]
myObject = [a: 2, b: 3, c: 4]
myMultilineObject = [
a: 2,
b: 3,
c: 4,
d: [1, 2, 3]
]
myNestedObject = [
[
value: 2,
type: "number"
], [
type: "object",
value: [
name: "obj",
count: 3
]],
[value: [1,2,3], 
type: "array"],
[
value: "hello world",
type: "string"
]
]

object = [
name: "bob",
type: "sprite"
/* the end -
or is it */ ]
endfunc
endmodule

for k, v in iterable do
  print(k + ", " + v)
loop

// duck
func main( )
  numbers = []
  for i = 2 to 1000 do
    numbers[i] = 1
  loop
  for i = 2 to 1000 do
    if numbers[i] == 1 then
      numbers[i] = 0
      for j = 2 to 1000/i do
        numbers[i*j] = 0
      loop
      duck.print(i)
    endif
  loop
endfunc

main()