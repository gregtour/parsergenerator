; *************************
; *      Duck Syntax      *
; *  Version 0.2.17.5.15  *
; *************************
; root symbol
<program> ::= <top-level-block>
;
; root level stmts
<top-level-block> ::= <top-level-stmt> <top-level-block>
<top-level-block> ::= <epsilon>
;
; one or more comma separated identifiers
<identifier-list> ::= <identifier> , <identifier-list>
<identifier-list> ::= <identifier>
;
; optional endlines
<optendl> ::= <endl>
<optendl> ::= <epsilon>
;
; import, include, module, or statement are top level
<top-level-stmt> ::= import <identifier-list> <endl>
<top-level-stmt> ::= include <string> <endl>
<top-level-stmt> ::= module <identifier> <endl> <block> endmodule <endl>
<top-level-stmt> ::= <stmt>
;
; statement block
<block> ::= <stmt> <block>
<block> ::= <epsilon>
;
; program statements
<stmt> ::= <expr> <endl>
<stmt> ::= <assignment> <endl>
<stmt> ::= <self-assignment> <endl>
<stmt> ::= <class> <endl>
<stmt> ::= <function> <endl>
<stmt> ::= <if> <endl>
<stmt> ::= <for> <endl>
<stmt> ::= <while> <endl>
<stmt> ::= <let-block> <endl>
<stmt> ::= <try-block> <endl>
<stmt> ::= return <endl>
<stmt> ::= return <expr> <endl>
<stmt> ::= continue <endl>
<stmt> ::= break <endl>
<stmt> ::= throw <expr> <endl>
<stmt> ::= <endl>
;
; class structure
<class> ::= class <identifier> <parameters> <class-ext>
<class-ext> ::= extends <identifier-list> <endl> <class-body>
<class-ext> ::= <endl> <class-body>
<class-body> ::= <block> endclass
;
; function definitions
<function> ::= func <identifier> <function-def>
<function> ::= func <string> <function-def>
<function-def> ::= <parameters> <endl> <block> endfunc
;
; function definition parameters
<parameters> ::= ( <identifier-list> )
<parameters> ::= ( )
<parameters> ::= <epsilon>
;
; function call arguments
<arguments> ::= <epsilon>
<arguments> ::= <expr-list>
<expr-list> ::= <expr> , <expr-list>
<expr-list> ::= <expr>
;
; if conditions
<if> ::= if <condition> then <endl> <block> <elseif>
<elseif> ::= else <endl> <block> endif
<elseif> ::= else <if>
<elseif> ::= endif
;
; for-to and for-in loops
<for> ::= for <identifier> <for-start>
<for-start> ::= = <arithmetic> to <arithmetic> do <endl> <loop-end>
<for-start> ::= = <arithmetic> to <arithmetic> step <arithmetic> do <endl> <loop-end>
<for-start> ::= in <value> do <endl> <loop-end>
;
; while and do-while loops
<while> ::= while <condition> do <endl> <loop-end>
<while> ::= do <endl> <block> loop while <condition> 
<loop-end> ::= <block> loop
;
; let block
<let-block> ::= let <bindings> <endl> begin <endl> <block> end
<bindings> ::= <binding> , <optendl> <bindings>
<bindings> ::= <binding>
<binding> ::= <identifier> = <expr>
;
; try exception catching blocks
<try-block> ::= try <endl> <block> <catch-block>
<catch-block> ::= catch <l-value> <endl> <block> done
<catch-block> ::= done
;
; assignment statements
<assignment> ::= <l-value> = <expr>
<assignment> ::= <l-value> = <object>
<self-assignment> ::= <l-value> += <arithmetic>
<self-assignment> ::= <l-value> -= <arithmetic>
<self-assignment> ::= <l-value> *= <arithmetic>
<self-assignment> ::= <l-value> /= <arithmetic>
<self-assignment> ::= <l-value> ++
<self-assignment> ::= <l-value> --
;
; l-value, assignables
<l-value> ::= <identifier>
<l-value> ::= <l-value> [ <arithmetic> ]
<l-value> ::= <l-value> . <identifier>
;
; associative arithmetic and logic
<expr> ::= <condition>
<condition> ::= <condition> and <logic>
<condition> ::= <condition> or <logic>
<condition> ::= <logic>
<logic> ::= not <comparison>
<logic> ::= <comparison>
<comparison> ::= <comparison> == <arithmetic>
<comparison> ::= <comparison> != <arithmetic>
<comparison> ::= <comparison> \< <arithmetic>
<comparison> ::= <comparison> > <arithmetic>
<comparison> ::= <comparison> \<= <arithmetic>
<comparison> ::= <comparison> >= <arithmetic>
<comparison> ::= <value> is <l-value>
<comparison> ::= <value> is not <l-value>
<comparison> ::= <arithmetic>
<arithmetic> ::= <arithmetic> + <term>
<arithmetic> ::= <arithmetic> - <term>
<arithmetic> ::= <term>
<term> ::= <term> * <factor>
<term> ::= <term> / <factor>
<term> ::= <term> mod <factor>
<term> ::= <factor>
<factor> ::= - <value>
<factor> ::= ! <value>
<factor> ::= <value>
;
; basic value
<value> ::= <primitive>
<value> ::= <l-value>
<value> ::= <l-value> ( <arguments> )
<value> ::= ( <expr> )
;
; primitive values
<primitive> ::= true
<primitive> ::= false
<primitive> ::= <integer>
<primitive> ::= <float>
<primitive> ::= <string>
;
; object initializers
<object> ::= [ <optendl> ]
<object> ::= [ <optendl> <array-init>
<object> ::= [ <optendl> <dictionary-init>
;
; arrays
<array-init> ::= <expr> , <optendl> <array-init>
<array-init> ::= <expr> <optendl> ]
;
; objects
<dictionary-init> ::= <dictionary-entry> , <optendl> <dictionary-init>
<dictionary-init> ::= <dictionary-entry> ]
<dictionary-entry> ::= <identifier> : <optendl> <expr>
; EOF